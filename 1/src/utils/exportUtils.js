export function exportDataStory(title, cells, volunteerData) {
  // Generate HTML export
  const htmlContent = generateHTMLExport(title, cells, volunteerData);
  downloadHTML(htmlContent, `${title.replace(/\s+/g, '_')}_DataStory.html`);
  
  // Also generate markdown for easy sharing
  const markdownContent = generateMarkdownExport(title, cells);
  downloadMarkdown(markdownContent, `${title.replace(/\s+/g, '_')}_DataStory.md`);
}

function generateHTMLExport(title, cells, volunteerData) {
  const css = `
    <style>
      body { 
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        line-height: 1.6;
        color: #333;
      }
      h1 { color: #1f2937; border-bottom: 3px solid #3b82f6; padding-bottom: 10px; }
      h2 { color: #374151; margin-top: 30px; }
      h3 { color: #4b5563; }
      .cell { 
        margin: 20px 0;
        padding: 20px;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        background: #fff;
      }
      .chart-placeholder {
        background: #f9fafb;
        border: 2px dashed #d1d5db;
        padding: 40px;
        text-align: center;
        color: #6b7280;
        border-radius: 4px;
      }
      .metadata {
        background: #f3f4f6;
        padding: 15px;
        border-radius: 4px;
        margin: 20px 0;
        font-size: 0.9em;
      }
      ul { padding-left: 20px; }
      li { margin: 5px 0; }
      strong { color: #1f2937; }
      code { 
        background: #f3f4f6;
        padding: 2px 4px;
        border-radius: 3px;
        font-size: 0.9em;
      }
    </style>
  `;

  let htmlBody = `<h1>${title}</h1>`;
  
  // Add metadata
  htmlBody += `
    <div class="metadata">
      <strong>Generated:</strong> ${new Date().toLocaleString()}<br>
      <strong>Data Period:</strong> Volunteer activity analysis<br>
      <strong>Total Hours:</strong> ${volunteerData.totalHours?.toLocaleString() || 'N/A'}<br>
      <strong>Active Volunteers:</strong> ${volunteerData.activeVolunteersCount || 'N/A'}
    </div>
  `;

  cells.forEach((cell) => {
    htmlBody += `<div class="cell">`;
    
    if (cell.type === 'text') {
      htmlBody += parseMarkdownToHTML(cell.content);
    } else if (cell.type === 'chart') {
      htmlBody += `
        <h3>${cell.content.title || 'Chart'}</h3>
        <div class="chart-placeholder">
          ðŸ“Š ${cell.content.title || 'Chart'}<br>
          <small>Chart Type: ${cell.content.chartType}, Data: ${cell.content.dataSource}</small><br>
          <em>Interactive charts available in the live dashboard</em>
        </div>
      `;
    }
    
    htmlBody += `</div>`;
  });

  return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${title}</title>
      ${css}
    </head>
    <body>
      ${htmlBody}
      <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 0.9em;">
        Generated by YMCA Volunteer Dashboard | ${new Date().toLocaleDateString()}
      </footer>
    </body>
    </html>
  `;
}

function generateMarkdownExport(title, cells) {
  let markdown = `# ${title}\n\n`;
  markdown += `*Generated on ${new Date().toLocaleDateString()}*\n\n`;

  cells.forEach((cell) => {
    if (cell.type === 'text') {
      markdown += cell.content + '\n\n';
    } else if (cell.type === 'chart') {
      markdown += `## ${cell.content.title || 'Chart'}\n\n`;
      markdown += `*Chart: ${cell.content.chartType} chart showing ${cell.content.dataSource}*\n\n`;
      markdown += `> Interactive chart available in dashboard - showing ${cell.content.dataSource} data\n\n`;
    }
  });

  return markdown;
}

function parseMarkdownToHTML(markdown) {
  if (!markdown) return '';
  
  return markdown
    // Headers
    .replace(/^### (.*$)/gm, '<h3>$1</h3>')
    .replace(/^## (.*$)/gm, '<h2>$1</h2>')
    .replace(/^# (.*$)/gm, '<h1>$1</h1>')
    
    // Bold and italic
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    
    // Code
    .replace(/`(.*?)`/g, '<code>$1</code>')
    
    // Lists
    .replace(/^\* (.*$)/gm, '<li>$1</li>')
    .replace(/^\d+\. (.*$)/gm, '<li>$1</li>')
    
    // Wrap consecutive <li> tags in <ul>
    .replace(/(<li>.*<\/li>\s*)+/g, '<ul>$&</ul>')
    
    // Line breaks and paragraphs
    .replace(/\n\n/g, '</p><p>')
    .replace(/^(?!<[h|u|l])(.+)$/gm, '<p>$1</p>')
    .replace(/<p><\/p>/g, '');
}

function downloadHTML(content, filename) {
  const blob = new Blob([content], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

function downloadMarkdown(content, filename) {
  const blob = new Blob([content], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}